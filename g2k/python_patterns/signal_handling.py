# signal_handling.py

# ðŸ“Œ Principle:
# Signal handling allows programs to react to asynchronous events, such as interrupts, termination requests, or alarms. In this example, we register a signal handler for the SIGINT signal (typically generated by pressing Ctrl+C in the terminal).
# Signal Handling: We use the signal module to catch a signal (in this case, SIGINT) and invoke a custom handler (handle_signal) to execute a graceful exit or clean-up when the signal is received.
# Signal handling is often used for clean-up operations or for controlling the behavior of long-running processes, such as background tasks or servers.

import signal
import time


# Signal handler function
def handle_signal(signum, frame):
    print(f"Received signal: {signum}. Exiting gracefully...")
    exit(0)


def main():
    # Register signal handler
    signal.signal(signal.SIGINT, handle_signal)

    print("Running... Press Ctrl+C to trigger the signal handler.")

    # Simulating a long-running process
    while True:
        time.sleep(1)
        print("Working...")


if __name__ == "__main__":
    main()
